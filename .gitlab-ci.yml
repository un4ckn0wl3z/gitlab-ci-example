workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

variables:
  IMAGE_TAG: "1.1"
  APP_PATH: /root/cicd_app
  APP_PORT: 30070

stages:
  - test
  - build
  - deploy

run_unit_tests:
  image: node:17-alpine3.14
  stage: test
  tags:
  - docker
  - remote
  before_script:
  - cd app
  - npm i
  script:
  - npm test
  artifacts:
    when: always
    reports:
      junit: app/junit.xml

build_image:
  stage: build
  tags:
  - shell
  - remote
  script:
  - docker build -t $CI_REGISTRY_IMAGE:$IMAGE_TAG .

push_image:
  stage: build
  needs:
  - build_image
  tags:
  - shell
  - remote
  before_script:
  - echo "Docker registry url is $CI_REGISTRY"
  - echo "Docker registry username is $CI_REGISTRY_USER"
  - echo "Docker image repo is $CI_REGISTRY_IMAGE"
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.gitlab.com
  script:
  - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

deploy_to_dev:
  stage: deploy
  tags:
  - shell
  - remote
  before_script:
  - chmod 400 $SSH_PRIVATE_KEY
  - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml $DEPLOY_USER@$DEPLOY_SERVER:$APP_PATH
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY $DEPLOY_USER@$DEPLOY_SERVER "
      cd $APP_PATH &&
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD registry.gitlab.com &&
      export DC_IMAGE_NAME=$CI_REGISTRY_IMAGE &&
      export DC_IMAGE_TAG=$IMAGE_TAG &&
      export DC_APP_PORT=$APP_PORT &&
      docker-compose down &&
      docker-compose up -d"
  environment:
    name: development
    url: http://$DEPLOY_SERVER:30070